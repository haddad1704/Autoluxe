# Generated by Django 5.0.4 on 2024-05-24 17:31
# Importation des modèles d'authentification de Django (UserManager, etc.)
import django.contrib.auth.models  
# Importation de l'utilitaire de gestion des dates et heures de Django
import django.utils.timezone  
# Importation des classes nécessaires pour créer des migrations et des modèles
from django.db import migrations, models  


# Définition de la classe de migration
class Migration(migrations.Migration):  
    # Indique que cette migration est initiale (première création du modèle)
    initial = True  

    # Définition des dépendances avec d'autres migrations
    dependencies = [  
        # Dépend de la migration 0012 dans l'application auth
        ("auth", "0012_alter_user_first_name_max_length"),  
    ]  

    # Liste des opérations effectuées par cette migration
    operations = [  
        # Création d’un nouveau modèle nommé "User"
        migrations.CreateModel(  
            name="User",  # Nom du modèle créé
            fields=[  # Liste des champs de la table User
                (
                    "id",  # Nom du champ
                    models.BigAutoField(  # Champ clé primaire auto-incrémentée
                        auto_created=True,  # Créé automatiquement par Django
                        primary_key=True,  # Défini comme clé primaire
                        serialize=False,  # Non sérialisé par défaut
                        verbose_name="ID",  # Nom lisible affiché
                    ),
                ),
                (
                    "password",  # Champ du mot de passe
                    models.CharField(max_length=128, verbose_name="password"),  # Mot de passe haché stocké
                ),
                (
                    "last_login",  # Champ dernière connexion
                    models.DateTimeField(  # Champ de type date/heure
                        blank=True,  # Peut être vide
                        null=True,  # Peut être nul
                        verbose_name="last login",  # Nom affiché
                    ),
                ),
                (
                    "is_superuser",  # Champ booléen superutilisateur
                    models.BooleanField(  # Champ vrai/faux
                        default=False,  # Valeur par défaut : non
                        help_text="Désigne que cet utilisateur a tous les droits.",  # Texte explicatif
                        verbose_name="superuser status",  # Nom affiché
                    ),
                ),
                (
                    "first_name",  # Champ prénom
                    models.CharField(  # Champ texte
                        blank=True,  # Peut être vide
                        max_length=150,  # Longueur max
                        verbose_name="first name",  # Nom affiché
                    ),
                ),
                (
                    "last_name",  # Champ nom de famille
                    models.CharField(  # Champ texte
                        blank=True,  # Peut être vide
                        max_length=150,  # Longueur max
                        verbose_name="last name",  # Nom affiché
                    ),
                ),
                (
                    "is_staff",  # Champ booléen staff
                    models.BooleanField(  # Champ vrai/faux
                        default=False,  # Valeur par défaut : non
                        help_text="Indique si l’utilisateur peut accéder à l’interface d’administration.",  # Aide
                        verbose_name="staff status",  # Nom affiché
                    ),
                ),
                (
                    "is_active",  # Champ booléen actif
                    models.BooleanField(  # Champ vrai/faux
                        default=True,  # Valeur par défaut : actif
                        help_text="Indique si le compte est actif. Désactiver au lieu de supprimer.",  # Texte explicatif
                        verbose_name="active",  # Nom affiché
                    ),
                ),
                (
                    "date_joined",  # Champ date d’inscription
                    models.DateTimeField(  # Champ date/heure
                        default=django.utils.timezone.now,  # Par défaut : date actuelle
                        verbose_name="date joined",  # Nom affiché
                    ),
                ),
                (
                    "username",  # Champ nom d’utilisateur
                    models.CharField(  # Champ texte
                        max_length=150,  # Longueur max
                        unique=True,  # Doit être unique
                        verbose_name="Username",  # Nom affiché
                    ),
                ),
                (
                    "email",  # Champ email
                    models.EmailField(  # Champ email
                        max_length=254,  # Longueur max
                        unique=True,  # Doit être unique
                        verbose_name="Email address",  # Nom affiché
                    ),
                ),
                (
                    "user_type",  # Champ type d’utilisateur
                    models.CharField(  # Champ texte
                        choices=[("car_owner", "Car Owner"), ("client", "Client")],  # Liste des choix possibles
                        default="client",  # Valeur par défaut : client
                        max_length=20,  # Longueur max
                        verbose_name="User Type",  # Nom affiché
                    ),
                ),
                (
                    "groups",  # Champ groupes
                    models.ManyToManyField(  # Relation plusieurs-à-plusieurs
                        blank=True,  # Peut être vide
                        help_text="Groupes auxquels appartient l’utilisateur. Hérite des permissions de ces groupes.",  # Texte explicatif
                        related_name="user_set",  # Nom de la relation inverse
                        related_query_name="user",  # Nom de la requête inverse
                        to="auth.group",  # Relation avec le modèle Group
                        verbose_name="groups",  # Nom affiché
                    ),
                ),
                (
                    "user_permissions",  # Champ permissions utilisateur
                    models.ManyToManyField(  # Relation plusieurs-à-plusieurs
                        blank=True,  # Peut être vide
                        help_text="Permissions spécifiques attribuées à cet utilisateur.",  # Texte explicatif
                        related_name="user_set",  # Nom de la relation inverse
                        related_query_name="user",  # Nom de la requête inverse
                        to="auth.permission",  # Relation avec le modèle Permission
                        verbose_name="user permissions",  # Nom affiché
                    ),
                ),
            ],
            options={  # Options du modèle
                "verbose_name": "user",  # Nom affiché au singulier
                "verbose_name_plural": "users",  # Nom affiché au pluriel
                "abstract": False,  # Ce modèle n'est pas abstrait
            },
            managers=[  # Définition des gestionnaires (managers)
                ("objects", django.contrib.auth.models.UserManager()),  # Manager par défaut de Django pour User
            ],
        ),
    ]
